c
<<<<<<< HEAD
@last_connect_time.in_time_zone("America/Los_Angeles")
Time.zone
@last_connect_time.in_time_zone("Los Angeles")
@last_connect_time.in_time_zone("PST")
@last_connect_time.in_time_zone("PST"))
@last_connect_time.in_time_zone("Pacific")
@last_connect_time
=======
n
s
c
n
session
s
n
user
user.authenticate(params[:password])
params
c
n
session[14]
session
s
n
user
n
c
user
uesr
n
q
params[:session].present?
params[:session].isEmpty?
params[:session]
params
q
params
params[:session][:email]
params[:session]
c
cc
c
:user
params[:password]
params[:email]
email
User
>>>>>>> dev
c
Connection.where("turtle_id = #{turtle_id}").order('created_at desc').take
Connection.where("turtle_id = #{turtle_id}").order('created_at desc').take(1)
Connection.where("turtle_id = #{turtle_id}").order('created_at desc').limit(1)
Connection.find_all(:turtle_name => "scratch")
Connection.find_all(turtle_name: "scratch")
Connection.find_all_by_turtlename("scratch")
Connection.find_all_by_turtle_name("scratch")
Connection.find(turtle_id: 3)
Connection.find_all_by_turtle_id(3)
Connection.find_by_turtle_id(3)
Connection.find_by_turtleid(3)
Connection.find_all_by_turtle_id(turtle_id)
Connection.find_all_by_turtleid(turtle_id)
Connection.select_all(turtle_id: turtle_id)
Connection.find_all(turtle_id: turtle_id)
Connection.find_by(turtle_id: turtle_id)
Connection.find_where(turtle_id: turtle_id)
Connection.find_where(turtle_id: turtle_Id)
Connection.find(turtle_id)
Connection.find(turtle_id: turtle_id)
Connection.find_by(turtle_id: turtle_id)
Connection.find("turtle_id = #{turtle_id}")
c
last_connection(3).pluck(:updated_at)
last_connection(3)
last_connection(3).updated_at
last_connection(3).update_at
last_connection(3)
last_connection
@first_turtle.id
c
Connection.where("turtle_id = #{turtle_id}").order('created_at desc').limit(1)
Connection.where("turtle_id = #{turtle_id}").order('created_at desc')
Connection.where("turtle_id = #{turtle_id}")
Connection.where('turtle_id = ' + turtle_id)
turtle_id
q
c
q
c
q
c
q
c
q
c
n
q
c
n
connection_exists(params[:turtle_id])
q
y
q
c
connection_exists(params[:turtle_id]).present?
c
connes
c
n
m
n
o
s
params
params[:turtle_id]
params
@network
q
c
@network
c
cc
c
params[:network]
@network
c
@@key
c
@@key
c
@@key
c
@@key
c
@@key
c
n
@@key
q
c
AES.key
@key
@network.encrypted_password
@network
c
AES.decrypt("Jn7gl7nwu1ie465UpnNLUQ==$uD2D+9YEgo2EGOXO9He+oQ==", @key)
AES.encrypt(params[:network][:encrypted_password], @key)
n
c
AES.key
@key
c
params[:id]
params
c
network_params
q
params
network_params
q
params.require(:turtle_id)
params.require(:network)
params.require(:turtle_id, :network)
network_params
q
params[:network]["password"]
params[:network][:password]
params[:network]
params[:turtle_id]
network_params
c
params[:turtle_id]
params[:turtle_id
params
:params
network_params
c
@network
n
network_params
c
network_params
c
params
c
n
s
c
params[:network][:password]
params[:network][:name]
params[:network]
params[:name]
params["name"]
params["password"]
params["password_confirmation"]
params[:password_confirmation]
params
q
c
params
c
params
parms
c
params
c
params[:turtle][:image_path].present?
params[:turtle][:image_path].nil?
params[:turtle][:image_path]
params[:turtle]
c
n
@turtle.save
@turtle
n
@turtle.name
n
@turtle
n
path
n
directory
n
name
n
s
c
s
n
c
q
params[:image_path]
params[:turtle][:image_path].original_fi
params[:turtle][:image_path]
params[:turtle]
turtle_params.filename
turtle_params[:filename]
turtle_params["image_path"][:filename]
turtle_params["image_path"][:files]
params[:files]
turtle_params["image_path"].filename
turtle_params["image_path"]["filename"]
turtle_params["image_path"]["tempfile"]
turtle_params["image_path"]["tempfile]
turtle_params["image_path"]
turtle_params["image_path"][@original_filename]
turtle_params["image_path"]["original_filename"]
turtle_params["image_path"]["datafile"]
turtle_params["image_path"]
turtle_params["datafile"]
File.open("turtle.png")
turtle_params
c
turtle_params
c
turtle_params
params[:turtle]
@turtle
c
turtle_params
q
turtle_params
c
params[:user]
